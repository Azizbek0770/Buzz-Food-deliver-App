name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run unit tests
      run: npm test -- --coverage
    
    - name: Run E2E tests
      run: |
        npm run build
        npm run start &
        npx wait-on http://localhost:3000
        npm run test:e2e
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: frontend

  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: buzz_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run migrations
      run: python manage.py migrate
      env:
        DEBUG: True
        SECRET_KEY: test-key
        ALLOWED_HOSTS: localhost,127.0.0.1
        POSTGRES_DB: buzz_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: localhost
    
    - name: Run tests
      run: |
        coverage run manage.py test
        coverage xml
      env:
        DEBUG: True
        SECRET_KEY: test-key
        ALLOWED_HOSTS: localhost,127.0.0.1
        POSTGRES_DB: buzz_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: localhost
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: backend

  build-and-deploy:
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Build and push frontend
      run: |
        cd frontend
        docker build -t ${{ secrets.AWS_ECR_REGISTRY }}/buzz-frontend:${{ github.sha }} .
        docker push ${{ secrets.AWS_ECR_REGISTRY }}/buzz-frontend:${{ github.sha }}
    
    - name: Build and push backend
      run: |
        cd backend
        docker build -t ${{ secrets.AWS_ECR_REGISTRY }}/buzz-backend:${{ github.sha }} .
        docker push ${{ secrets.AWS_ECR_REGISTRY }}/buzz-backend:${{ github.sha }}
    
    - name: Update ECS services
      run: |
        aws ecs update-service --cluster buzz-cluster --service buzz-frontend --force-new-deployment
        aws ecs update-service --cluster buzz-cluster --service buzz-backend --force-new-deployment
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"

  notify:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Send Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          ðŸš€ Deployment status: ${{ needs.build-and-deploy.result }}
          
          Frontend Tests: ${{ needs.frontend-test.result }}
          Backend Tests: ${{ needs.backend-test.result }}
          
          Commit: ${{ github.event.head_commit.message }}
          Author: ${{ github.event.head_commit.author.name }} 